Supabase uses the public schema by default, so make sure not to accidently double it.
Remember that the users table is in the auth schema, not public. Thats where the users email is.

  the using clause is not allowed for insert policies. Instead, you should use the with check clause to specify conditions that must be met for the insert operation.

 In PostgreSQL, the update keyword should not be used in the context of defining a policy for multiple operations in a single statement. Each operation (select, insert, update, delete) must have its own policy.

When working on a web app (react, typescript , etc) consider the example_table_template.sql, ExampleComponent.css, ExampleComponent.tsx, and ./supabase/functions/example-function/index.ts files. They are known-good.

Do not create Triggers or Functions or Stored Procedures. If you feel you need to, create them as an edge function (an example exists) and ask to deploy it with a powershell command. But the command must be run with npx. So, npx supabase functions deploy some-function. You will need to include the project id, found in supabase.ts, in with the call, like --project-ref asdf123. Inside the edge function folder, alongside index.ts, put a readme.md that describes what its supposed to be doing, and what table events should trigger it.

Files should be no more than 60 lines.
We are using Windows 11, so terminal commands should be PowerShell.


Prefer "early out" patterns, which check a condition and return early if it's not what we want. THis saves on nesting.

When something is null, make sure to throw an error, do not just ignore it.